@page "/"
@inject DateFormatJsModule DateFormatJsModule

<button data-testid=@TestIds.FuncTestId
        @onclick=@OnFuncTriggerClicked>
  Trigger Func callback
</button>

<ul>
@foreach (var formattedDateTime in _formattedDateTimes)
{
  <li>@formattedDateTime</li>
}
</ul>


@code
{
  private readonly Func<DateTime, string> _funcSub = Substitute.For<Func<DateTime, string>>();

  private readonly IList<string> _formattedDateTimes = new List<string>();

  private async Task OnFuncTriggerClicked()
  {
    var dateFormatted = await DateFormatJsModule.FormatCurrentDateTimeAsync(_funcSub);

    // Verify the func is called
    _funcSub
      .ReceivedWithAnyArgs()
      .Invoke(default);

    @* LogToConsole(TestIds.FuncTestId, dateFormatted); *@
    _formattedDateTimes.Add(dateFormatted);
  }

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    await DateFormatJsModule.ImportModuleAsync();

    // This pretty much mocks the func object to be
    // "(DateTime dt) => dt.ToUniversalTime().ToString()"
    _funcSub
      .Invoke(Arg.Any<DateTime>())
      .Returns(args => ((DateTime)args[0]).ToUniversalTime().ToString());
  }

  private static void LogToConsole(string testId, string message)
  {
    message = message.Trim();
    if (!message.EndsWith("."))
    {
      message += ".";
    }

    Console.WriteLine($"[{testId}] {message}");
  }
}
